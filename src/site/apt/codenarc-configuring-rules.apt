		--------------------------------------------------
			        CodeNarc - Configuring Rules
		--------------------------------------------------

CodeNarc - Configuring Rules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  <<Contents>>

  * {{{Configuring_Rules_Within_a_RuleSet_File}Configuring Rules Within a RuleSet File}}

  * {{{Configuring_Rules_Using_a_Properties_File}Configuring Rules Using a Properties File}}

  * {{{Standard_Properties_for_Configuring_Rules}Standard Properties for Configuring Rules}}

  * {{{Customizing_Rule_Descriptions_Shown_in_the_HTML_Report}Customizing Rule Descriptions Shown in the HTML Report}} 

  []

  You can configure rules within the <RuleSet> file or within the "codenarc.properties" file.
  Both of these approaches are described in the sections below.

  <<NOTE>>: Keep in mind that <RuleSet> files can be nested (to any depth). That, along with the
  "codenarc.properties" file support, allows multiple layers of rule configuration. The hierarchical
  layering of configuration can come in handy within organizations comprised of multiple teams
  or projects. For instance, you can define an organization <RuleSet> file. Then each team can define its
  own <RuleSet> file and/or a "codenarc.properties" file, customizing the rules from the top-level file. 


* {Configuring Rules Within a RuleSet File}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  {{{codenarc-custom-ruleset.html}Creating a RuleSet}} describes how to create a new <RuleSet> and
  configure the rules within it.

  You can configure rules when you include a whole <RuleSet> using <<<\<ruleset-ref\>>>>,
  as in the following example:

+----------------------------------------------------------------------------------------
    <ruleset-ref path='rulesets/size.xml'>
        <rule-config name='ClassSize'>
            <property name='maxLines' value='500'/>
        </rule-config>
    </ruleset-ref>
+----------------------------------------------------------------------------------------


  Or you can configure <Rules> that you include individually using <<<\<rule\>>>>, as in the following example:

+----------------------------------------------------------------------------------------
    <rule class='org.codenarc.rule.naming.VariableNameRule'>
        <property name="finalRegex" value="F_[A-Z0-9]*"/>
        <property name='priority' value='1'/>
    </rule>
+----------------------------------------------------------------------------------------


* {Configuring Rules Using a Properties File}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  <<CodeNarc>> reads the properties file named "codenarc.properties", if found on the classpath,
  and applies the property values to any matching <Rules>. If the properties file is not found on
  the classpath, then do nothing.

  For each properties entry of the form <[rule-name].[property-name]=[property-value]>,
  the named property for the rule matching <rule-name> is set to the
  specified <property-value>. Properties entries not of this form or specifying rule
  names not within the current <RuleSet> are ignored.

  The following example "codenarc.properties" file configures several rules. Note that
  Fields with <<<Integer>>>, <<<String>>> and <<<Boolean>>> values are configured.

+----------------------------------------------------------------------------------------
# Sample RuleSet configuration
# Entries should be of the form:    [rule-name].[property-name]=[property-value]

CatchThrowable.doNotApplyToFilenames=BaseController.groovy,AbstractTest.groovy
CatchThrowable.priority = 1

ReturnFromFinallyBlock.priority = 1

# Turn off this rule
AbstractClassName.enabled=false

# Unset special naming for final fields -- use base 'regex' value for all names
FieldName.finalRegex=
# Make sure all field names are prefixed with '_'
FieldName.regex=_[a-z][a-zA-Z0-9]*
+----------------------------------------------------------------------------------------

  Note that you cannot add new rules using the "codenarc.properties" file, though you can disable
  (turn off) rules.


* {Standard Properties for Configuring Rules}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  The rules included with <<CodeNarc>> (as well as any subclasses of <<<AbstractRule>>>) provide
  several standard properties that can be used to configure how rules are applied to source files.

  The <<<applyToFilesMatching>>> and <<<doNotApplyToFilesMatching>>> properties enable filtering
  the files to which the rule is applied by matching a regular expression against the full pathname
  of each source file. If <<<applyToFilesMatching>>> is not empty or null, then the rule is only
  applied to source files with matching paths. Likewise, if <<<doNotApplyToFilesMatching>>> is not
  empty or null, then the rule is NOT applied to source files with matching paths. Both properties
  default to <<<null>>>.

  The <<<applyToFilenames>>> and <<<doNotApplyToFilenames>>> properties enable filtering
  the files to which the rule is applied by specifying a comma-separated list of filenames (no path)
  of source files. If <<<applyToFilenames>>> is not empty or null, then the rule is only
  applied to source files matching one of the specified filenames. Likewise, if
  <<<doNotApplyToFilesMatching>>> is not empty or null, then the rule is NOT applied to source files
  matching any of the specified filenames. Both properties default to <<<null>>>.

  The <<<enabled>>> boolean property allows a rule to be completely turned off (by setting it to <<<false>>>).
  It defaults to <<<true>>>.

  The <<<violationMessage>>> property enables overriding the rule violation message. If not null or
  empty, this is used as the message for all violations of this rule, overriding any message generated
  by the rule itself. This property defaults to <<<null>>>.

  You can also override the default <<<name>>> or <<<priority>>> properties for each rule.


* {Customizing Rule Descriptions Shown in the HTML Report}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  The descriptions for rules used in a <<CodeNarc>> report are shown at the bottom of the resulting
  HTML report. Those rule descriptions are retrieved from a <ResourceBundle>. This <ResourceBundle>
  consists of a base (parent) bundle, provided with the <<CodeNarc>> distribution, and an optional
  custom (child) bundle, which may be provided by the user.

  Because this is based on the standard Java <ResourceBundle> facility, you can customize (override) or
  translate these descriptions by providing your own locale-specific message properties file on the
  classpath. For example, a German one would be named "codenarc-messages_de.properties".

  The rule description message key is of the form "<<\<rule-name\>.description>>". Examples include
  "BooleanInstantiation.description" and "CatchThrowable.description".

  See the javadoc for the <<<java.util.ResourceBundle>>> class for more information.


** The Base Messages Resource Bundle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  The base <ResourceBundle> provided with the <<CodeNarc>> distribution  has a basename of
  "codenarc-base-messages". The rules provided with <<CodeNarc>> all have
  associated descriptions within the "codenarc-base-messages.properties" file.

  You can provide a locale-specific variant of this file on the classpath if you wish, but
  in most scenarios, the recommended approach for customizing rule descriptions is to provide a
  custom messages bundle file, as described below.


** The Custom Messages Resource Bundle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  You can optionally provide descriptions for new rules or override existing rule descriptions
  by placing a "codenarc-messages.properties" file on the classpath. This is also a <ResourceBundle>
  file, so it can have locale-specific variants, if needed. If this bundle (file) is present, it
  is searched first. If the desired message key is not found, only then is the base message bundle
  checked.

  You can provide rule description entries within this file for custom rules that you create.
  You can also include rule description entries for existing rules, in which case the descriptions in this
  file override the default descriptions.


** Customizing the Name and Description for an Existing Rule
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  You may wish to customize both the <name> and the description for an existing rule. For example,
  you may want to have multiple instances of a generic rule, each configured differently. Or you
  may just want to make the rule name more clearly denote its specific purpose.

  For example, in the following excerpt from a <RuleSet> file, because the <name> property is
  customized for the <<IllegalRegexRule>>, the new rule name "AuthorTagNotAllowed" will show up
  at the bottom of the HTML report, instead of the default rule name "IllegalRegex".

+----------------------------------------------------------------------------------------
    <rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name="name" value="AuthorTagNotAllowed"/>
        <property name='regex' value='\@author'/>
    </rule>
+----------------------------------------------------------------------------------------

  The rule description must be added to the custom messages resource bundle file 
  ("codenarc-messages.properties"). The message key will be "AuthorTagNotAllowed.description".




