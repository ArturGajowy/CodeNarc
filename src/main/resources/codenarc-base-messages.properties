# Resource Bundle for HtmlReportWriter messages

# BASIC
BooleanInstantiation.description=Use <em>Boolean.valueOf()</em> for variable values or <em>Boolean.TRUE</em> and <em>Boolean.FALSE</em> for constant values instead of calling the <em>Boolean()</em> constructor directly or calling <em>Boolean.valueOf(true)</em> or <em>Boolean.valueOf(false)</em>.
ReturnFromFinallyBlock.description=Returning from a <em>finally</em> block is confusing and can hide the original exception.
StringInstantiation.description=Use a String literal (e.g., "...") instead of calling the corresponding String constructor (new String("..")) directly.
ThrowExceptionFromFinallyBlock.description=Throwing an exception from a <em>finally</em> block is confusing and can hide the original exception.
EmptyCatchBlock.description=In most cases, exceptions should not be caught and ignored (swallowed).
EmptyTryBlock.description=Empty <em>try</em> blocks are confusing and serve no purpose.
EmptyFinallyBlock.description=Empty <em>finally</em> blocks are confusing and serve no purpose.
EmptyIfStatement.description=Empty <em>if</em> statements are confusing and serve no purpose.
EmptyElseBlock.description=Empty <em>else</em> blocks are confusing and serve no purpose.
EmptyForStatement.description=Empty <em>for</em> statements are confusing and serve no purpose.
EmptySwitchStatement.description=Empty <em>switch</em> statements are confusing and serve no purpose.
EmptyWhileStatement.description=Empty <em>while</em> statements are confusing and serve no purpose.
EmptySynchronizedStatement.description=Empty <em>synchronized</em> statements are confusing and serve no purpose.
EqualsAndHashCode.description=If either the <em>boolean equals(Object)</em> or the <em>int hashCode()</em> methods are overridden within a class, then both must be overridden.

# BRACES
IfStatementBraces.description=Use braces for <em>if</em> statements, even for a single statement.
WhileStatementBraces.description=Use braces for <em>while</em> statements, even for a single statement.
ElseBlockBraces.description=Use braces for <em>else</em> blocks, even for a single statement. By default, braces are not required for an <em>else</em> if it is followed immediately by an <em>if</em>. Set the <em>bracesRequiredForElseIf</em> property to true to require braces is that situation as well. 
ForStatementBraces.description=Use braces for <em>for</em> statements, even for a single statement.

# DESIGN
StatelessClass.description=Checks for fields on classes that should remain "stateless" and reentrant. The <em>ignoreFieldNames</em> property specifies one or more field names that should be ignored. The <em>ignoreFieldTypes</em> property specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').

# EXCEPTIONS
CatchError.description=Catching <em>Error</em> is dangerous; it can catch exceptions such as <em>ThreadDeath</em> and <em>OutOfMemoryError</em>.
CatchException.description=Catching <em>Exception</em> is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.
CatchNullPointerException.description=Catching <em>NullPointerException</em> is never appropriate. It should be avoided in the first place with proper null checking, and it can mask underlying errors.
CatchRuntimeException.description=Catching <em>RuntimeException</em> is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.
CatchThrowable.description=Catching <em>Throwable</em> is dangerous; it can catch exceptions such as <em>ThreadDeath</em> and <em>OutOfMemoryError</em>.
ThrowError.description=Checks for throwing an instance of <em>java.lang.Error</em>.
ThrowException.description=Checks for throwing an instance of <em>java.lang.Exception</em>.
ThrowNullPointerException.description=Checks for throwing an instance of <em>java.lang.NullPointerException</em>.
ThrowRuntimeException.description=Checks for throwing an instance of <em>java.lang.RuntimeException</em>.
ThrowThrowable.description=Checks for throwing an instance of <em>java.lang.Throwable</em>.

# GENERIC
IllegalRegex.description=Checks for a specified illegal regular expression within the source code. The <em>regex</em> property specifies the regular expression to check for. It is required and cannot be null or empty.
RequiredRegex.description=Checks for a specified regular expression that must exist within the source code. The <em>regex</em> property specifies the regular expression to check for. It is required and cannot be null or empty.

# GRAILS
GrailsPublicControllerMethod.description=Checks for <em>public</em> methods on Grails controller classes. Static methods are ignored.
GrailsSessionReference.description=Checks for references to the <em>session</em> object from within Grails controller and taglib classes.
GrailsServletContextReference.description=Checks for references to the <em>servletContext</em> object from within Grails controller and taglib classes. 

# IMPORTS
DuplicateImport.description=Duplicate import statements are unnecessary.
ImportFromSamePackage.description=An import of a class that is within the same package is unnecessary.
UnnecessaryGroovyImport.description=A Groovy file does not need to include an import for classes from <em>java.lang</em>, <em>java.util</em>, <em>java.io</em>, <em>java.net</em>, <em>groovy.lang</em> and <em>groovy.util</em>, as well as the classes <em>java.math.BigDecimal</em> and <em>java.math.BigInteger</em>.
UnusedImport.description=Imports for a class that is never referenced within the source file is unnecessary.

# JUNIT
JUnitSetUpCallsSuper.description=Checks that if the JUnit <em>setUp()</em> method is defined, that it includes a call to <em>super.setUp()</em>.
JUnitTearDownCallsSuper.description=Checks that if the JUnit <em>tearDown()</em> method is defined, that it includes a call to <em>super.tearDown()</em>.
JUnitAssertAlwaysFails.description=Checks for JUnit <em>assert()</em> method calls with constant arguments such that the assertion always fails. This includes: <em>assertTrue(false)</em>, <em>assertFalse(true)</em> and <em>assertNull(CONSTANT)</em>.
JUnitAssertAlwaysSucceeds.description=Checks for JUnit <em>assert()</em> method calls with constant arguments such that the assertion always succeeds. This includes: <em>assertTrue(true)</em>, <em>assertFalse(false)</em> and <em>assertNull(null)</em>.

# LOGGING
PrintStackTrace.description=Checks for calls to <em>printStackTrace()</em>.
Println.description=Checks for calls to <em>this.print()</em>, <em>this.println()</em> or <em>this.printf()</em>.
SystemErrPrint.description=Checks for calls to <em>System.err.print()</em>, <em>System.err.println()</em> or <em>System.err.printf()</em>.
SystemOutPrint.description=Checks for calls to <em>System.out.print()</em>, <em>System.out.println()</em> or <em>System.out.printf()</em>.

# NAMING
AbstractClassName.description=Verifies that the name of an abstract class matches a regular expression specified in the <em>regex</em> property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active. This rule ignores interfaces.
ClassName.description=Verifies that the name of a class matches a regular expression. By default it checks that the class name starts with an uppercase letter and is followed by zero or more word characters (letters, numbers or underscores). The <em>regex</em> property specifies the regular expression used to validate the class name.
FieldName.description=Verifies that the name of each field matches a regular expression. By default it checks that non-'final' field names start with a lowercase letter and contains only letters or numbers, and 'final' field names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The <em>regex</em> property specifies the default regular expression used to validate field names. The <em>finalRegex</em> property specifies the regular expression to validate 'final' field names. The <em>staticRegex</em> property specifies the regular expression to validate 'static' field names. The <em>staticFinalRegex</em> property specifies the regular expression to validate 'static final' field names.
InterfaceName.description=Verifies that the name of an interface matches a regular expression specified in the <em>regex</em> property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active.
MethodName.description=Verifies that the name of each method matches a regular expression. By default it checks that the method name starts with a lowercase letter. The <em>regex</em> property specifies the regular expression to check the method name against.
PackageName.description=Verifies that the package name for a class matches a regular expression. By default it checks that the package name consists of only lowercase letters, separated by periods. The <em>regex</em> property specifies the regular expression used to validate the package name. The <em>packageNameRequired</em> property indicates whether a package name declaration is required for all classes.
ParameterName.description=Verifies that the name of each parameter matches a regular expression. This rule applies to method parameters, constructor parameters and closure parameters. By default it checks that parameter names start with a lowercase letter and contains only letters or numbers. The <em>regex</em> property specifies the default regular expression used to validate the parameter name.
VariableName.description=Verifies that the name of each method matches a regular expression. By default it checks that non-'final' variable names start with a lowercase letter and contains only letters or numbers, and 'final' variable names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The <em>regex</em> property specifies the default regular expression used to validate a non-'final' variable name. The <em>finalRegex</em> property specifies the regular expression used to validate 'final' variable names.

# SIZE
ClassSize.description=Checks if the size of a class exceeds the number of lines specified by the <em>maxLines</em> property, which defaults to 1000.
MethodSize.description=Checks if the size of a method exceeds the number of lines specified by the <em>maxLines</em> property, which defaults to 100.
