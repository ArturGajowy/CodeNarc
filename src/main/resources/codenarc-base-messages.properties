

# Resource Bundle for CodeNarc messages

#-------------------------------------------------------------------------------
# BASIC rules
#-------------------------------------------------------------------------------
BigDecimalInstantiation.description=Checks for calls to the BigDecimal constructors that take a double parameter, which may result in an unexpected BigDecimal value.
BigDecimalInstantiation.description.html=Checks for calls to the <em>BigDecimal</em> constructors that take a <em>double</em> parameter, which may result in an unexpected <em>BigDecimal</em> value.

BooleanInstantiation.description=Use Boolean.valueOf() for variable values or Boolean.TRUE and Boolean.FALSE for constant values instead of calling the Boolean() constructor directly or calling Boolean.valueOf(true) or Boolean.valueOf(false).
BooleanInstantiation.description.html=Use <em>Boolean.valueOf()</em> for variable values or <em>Boolean.TRUE</em> and <em>Boolean.FALSE</em> for constant values instead of calling the <em>Boolean()</em> constructor directly or calling <em>Boolean.valueOf(true)</em> or <em>Boolean.valueOf(false)</em>.

BooleanMethodReturnsNull.description=Method with Boolean return type returns explicit null. A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen. This method can be invoked as though it returned a value of type boolean, and the compiler will insert automatic unboxing of the Boolean value. If a null value is returned, this will result in a NullPointerException.
BooleanMethodReturnsNull.description.html=Method with Boolean return type returns explicit null. A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen. This method can be invoked as though it returned a value of type boolean, and the compiler will insert automatic unboxing of the Boolean value. If a null value is returned, this will result in a NullPointerException.

CloneableWithoutClone.description=A class that implements java.lang.Cloneable should define a clone() method.
CloneableWithoutClone.description.html=A class that implements <em>java.lang.Cloneable</em> should define a <em>clone()</em> method.

CompareToWithoutComparable.description=If you implement a compareTo method then you should also implement the Comparable interface. If you don't then you could possibly get an exception if the Groovy == operator is invoked on your object. This is an issue fixed in Groovy 1.8 but present in previous versions. 
CompareToWithoutComparable.description.html=If you implement a compareTo method then you should also implement the Comparable interface. If you don't then you could possibly get an exception if the Groovy == operator is invoked on your object. This is an issue fixed in Groovy 1.8 but present in previous versions.

ConstantIfExpression.description=Checks for if statements with a constant value for the if expression, such as true, false, null, or a literal constant value.
ConstantIfExpression.description.html=Checks for <em>if</em> statements with a constant value for the if expression, such as <em>true</em>, <em>false</em>, <em>null</em>, or a literal constant value.

ConstantTernaryExpression.description=Checks for ternary expressions with a constant value for the boolean expression, such as true, false, null, or a literal constant value.
ConstantTernaryExpression.description.html=Checks for ternary expressions with a constant value for the boolean expression, such as <em>true</em>, <em>false</em>, <em>null</em>, or a literal constant value.

DeadCode.description=Dead code appears after a return statement or an exception is thrown. If code appears after one of these statements then it will never be executed and can be safely deleted. 
DeadCode.description.html=Dead code appears after a return statement or an exception is thrown. If code appears after one of these statements then it will never be executed and can be safely deleted.

DoubleNegative.description=There is no point in using a double negative, it is always positive. For instance !!x can always be simplified to x. And !(!x) can as well.
DoubleNegative.description.html=There is no point in using a double negative, it is always positive. For instance <em>!!x</em> can always be simplified to x. And <em>!(!x)</em> can as well.

DuplicateCaseStatement.description=Check for duplicate case statements in a switch block, such as two equal integers or strings.
DuplicateCaseStatement.description.html=Check for duplicate <em>case</em> statements in a <em>switch</em> block, such as two equal integers or strings.

EmptyCatchBlock.description=In most cases, exceptions should not be caught and ignored (swallowed).
EmptyCatchBlock.description.html=In most cases, exceptions should not be caught and ignored (swallowed).

EmptyTryBlock.description=Empty try blocks are confusing and serve no purpose.
EmptyTryBlock.description.html=Empty <em>try</em> blocks are confusing and serve no purpose.

EmptyFinallyBlock.description=Empty finally blocks are confusing and serve no purpose.
EmptyFinallyBlock.description.html=Empty <em>finally</em> blocks are confusing and serve no purpose.

EmptyIfStatement.description=Empty if statements are confusing and serve no purpose.
EmptyIfStatement.description.html=Empty <em>if</em> statements are confusing and serve no purpose.

EmptyElseBlock.description=Empty else blocks are confusing and serve no purpose.
EmptyElseBlock.description.html=Empty <em>else</em> blocks are confusing and serve no purpose.

EmptyForStatement.description=Empty for statements are confusing and serve no purpose.
EmptyForStatement.description.html=Empty <em>for</em> statements are confusing and serve no purpose.

EmptySwitchStatement.description=Empty switch statements are confusing and serve no purpose.
EmptySwitchStatement.description.html=Empty <em>switch</em> statements are confusing and serve no purpose.

EmptyWhileStatement.description=Empty while statements are confusing and serve no purpose.
EmptyWhileStatement.description.html=Empty <em>while</em> statements are confusing and serve no purpose.

EmptySynchronizedStatement.description=Empty synchronized statements are confusing and serve no purpose.
EmptySynchronizedStatement.description.html=Empty <em>synchronized</em> statements are confusing and serve no purpose.

EqualsAndHashCode.description=If either the equals(Object) or the hashCode() methods are overridden within a class, then both must be overridden.
EqualsAndHashCode.description.html=If either the <em>boolean equals(Object)</em> or the <em>int hashCode()</em> methods are overridden within a class, then both must be overridden.

ExplicitArrayListInstantiation.description=This rule checks for the explicit instantiation of an ArrayList. In Groovy, it is best to write "new ArrayList()" as "[]", which creates the same object.
ExplicitArrayListInstantiation.description.html=This rule checks for the explicit instantiation of an <em>ArrayList</em>. In Groovy, it is best to write <em>new ArrayList()</em> as <em>[]<em>, which creates the same object.

ExplicitCallToModMethod.description=This rule detects when the mod(Object) method is called directly in code instead of using the % operator. A groovier way to express this: a.mod(b) is this: a % b
ExplicitCallToModMethod.description.html=This rule detects when the <em>mod(Object)</em> method is called directly in code instead of using the % operator. A groovier way to express this: <em>a.mod(b)</em> is this: <em>a % b</em>

ExplicitCallToPowerMethod.description=This rule detects when the power(Object) method is called directly in code instead of using the ** operator. A groovier way to express this: a.power(b) is this: a ** b
ExplicitCallToPowerMethod.description.html=This rule detects when the <em>power(Object)</em> method is called directly in code instead of using the ** operator. A groovier way to express this: <em>a.power(b)</em> is this: <em>a ** b</em>

ExplicitCallToDivMethod.description=This rule detects when the div(Object) method is called directly in code instead of using the / operator. A groovier way to express this: a.div(b) is this: a / b
ExplicitCallToDivMethod.description.html=This rule detects when the <em>div(Object)</em> method is called directly in code instead of using the / operator. A groovier way to express this: <em>a.div(b)</em> is this: <em>a / b</em>

ExplicitCallToMultiplyMethod.description=This rule detects when the minus(Object) method is called directly in code instead of using the * operator. A groovier way to express this: a.multiply(b) is this: a * b
ExplicitCallToMultiplyMethod.description.html=This rule detects when the <em>minus(Object)</em> method is called directly in code instead of using the * operator. A groovier way to express this: <em>a.multiply(b)</em> is this: <em>a * b</em>

ExplicitCallToMinusMethod.description=This rule detects when the minus(Object) method is called directly in code instead of using the - operator. A groovier way to express this: a.minus(b) is this: a - b
ExplicitCallToMinusMethod.description.html=This rule detects when the <em>minus(Object)</em> method is called directly in code instead of using the - operator. A groovier way to express this: <em>a.minus(b)</em> is this: <em>a - b</em>

ExplicitCallToRightShiftMethod.description=This rule detects when the rightShift(Object) method is called directly in code instead of using the >> operator. A groovier way to express this: a.rightShift(b) is this: a >> b
ExplicitCallToRightShiftMethod.description.html=This rule detects when the <em>rightShift(Object)</em> method is called directly in code instead of using the >> operator. A groovier way to express this: <em>a.rightShift(b)</em> is this: <em>a >> b</em>

ExplicitCallToLeftShiftMethod.description=This rule detects when the leftShift(Object) method is called directly in code instead of using the << operator. A groovier way to express this: a.leftShift(b) is this: a << b
ExplicitCallToLeftShiftMethod.description.html=This rule detects when the <em>leftShift(Object)</em> method is called directly in code instead of using the << operator. A groovier way to express this: <em>a.leftShift(b)</em> is this: <em>a << b</em>

ExplicitCallToGetAtMethod.description=This rule detects when the getAt(Object) method is called directly in code instead of using the [] index operator. A groovier way to express this: a.getAt(b) is this: a[b]
ExplicitCallToGetAtMethod.description.html=This rule detects when the <em>getAt(Object)</em> method is called directly in code instead of using the [] index operator. A groovier way to express this: <em>a.getAt(b)</em> is this: <em>a[b]</em>

ExplicitCallToXorMethod.description=This rule detects when the xor(Object) method is called directly in code instead of using the ^ operator. A groovier way to express this: a.xor(b) is this: a ^ b
ExplicitCallToXorMethod.description.html=This rule detects when the <em>xor(Object)</em> method is called directly in code instead of using the ^ operator. A groovier way to express this: <em>a.xor(b)</em> is this: <em>a ^ b</em>

ExplicitCallToAndMethod.description=This rule detects when the and(Object) method is called directly in code instead of using the & operator. A groovier way to express this: a.and(b) is this: a & b
ExplicitCallToAndMethod.description.html=This rule detects when the <em>and(Object)</em> method is called directly in code instead of using the & operator. A groovier way to express this: <em>a.and(b)</em> is this: <em>a & b</em>

ExplicitCallToOrMethod.description=This rule detects when the or(Object) method is called directly in code instead of using the | operator. A groovier way to express this: a.or(b) is this: a | b
ExplicitCallToOrMethod.description.html=This rule detects when the <em>or(Object)</em> method is called directly in code instead of using the | operator. A groovier way to express this: <em>a.or(b)</em> is this: <em>a | b</em>

ExplicitCallToPlusMethod.description=This rule detects when the plus(Object) method is called directly in code instead of using the + operator. A groovier way to express this: a.plus(b) is this: a + b
ExplicitCallToPlusMethod.description.html=This rule detects when the <em>plus(Object)</em> method is called directly in code instead of using the + operator. A groovier way to express this: <em>a.plus(b)</em> is this: <em>a + b</em>

ExplicitCallToEqualsMethod.description=This rule detects when the equals(Object) method is called directly in code instead of using the == or != operator. A groovier way to express this: a.equals(b) is this: a == b and a groovier way to express : !a.equals(b) is : a != b
ExplicitCallToEqualsMethod.description.html=This rule detects when the <em>equals(Object)</em> method is called directly in code instead of using the == or != operator. A groovier way to express this: <em>a.equals(b)</em> is this: <em>a == b</em> and a groovier way to express : <em>!a.equals(b)</em> is : <em>a != b</em>

ExplicitCallToCompareToMethod.description=This rule detects when the compareTo(Object) method is called directly in code instead of using the <=>, >, >=, <, and <= operators. A groovier way to express this: a.compareTo(b) is this: a <=> b, or using the other operators.
ExplicitCallToCompareToMethod.description.html=This rule detects when the <em>compareTo(Object)</em> method is called directly in code instead of using the <=>, >, >=, <, and <= operators. A groovier way to express this: <em>a.compareTo(b)</em> is this: <em>a <=> b</em>, or using the other operators.

ExplicitHashMapInstantiation.description=This rule checks for the explicit instantiation of a HashMap. In Groovy, it is best to write "new HashMap()" as "[:]", which creates the same object.
ExplicitHashMapInstantiation.description.html=This rule checks for the explicit instantiation of a <em>HashMap</em>. In Groovy, it is best to write <em>new HashMap()</em> as <em>[:]</em>, which creates the same object.

ExplicitHashSetInstantiation.description=This rule checks for the explicit instantiation of a HashSet. In Groovy, it is best to write "new HashSet()" as "[] as Set", which creates the same object.
ExplicitHashSetInstantiation.description.html=This rule checks for the explicit instantiation of a <em>HashSet</em>. In Groovy, it is best to write <em>new HashSet()</em> as <em>[] as Set</em>, which creates the same object.

ExplicitLinkedListInstantiation.description=This rule checks for the explicit instantiation of a LinkedList. In Groovy, it is best to write "new LinkedList()" as "[] as Queue", which creates the same object.
ExplicitLinkedListInstantiation.description.html=This rule checks for the explicit instantiation of a <em>LinkedList</em>. In Groovy, it is best to write <em>new LinkedList()</em> as <em>[] as Queue</em>, which creates the same object.

ExplicitStackInstantiation.description=This rule checks for the explicit instantiation of a Stack. In Groovy, it is best to write "new Stack()" as "[] as Stack", which creates the same object.
ExplicitStackInstantiation.description.html=This rule checks for the explicit instantiation of a <em>Stack</em>. In Groovy, it is best to write <em>new Stack()</em> as <em>[] as Stack</em>, which creates the same object.

ExplicitTreeSetInstantiation.description=This rule checks for the explicit instantiation of a TreeSet. In Groovy, it is best to write "new TreeSet()" as "[] as SortedSet", which creates the same object.
ExplicitTreeSetInstantiation.description.html=This rule checks for the explicit instantiation of a <em>TreeSet</em>. In Groovy, it is best to write <em>new TreeSet()</em> as <em>[] as SortedSet</em>, which creates the same object.

GStringAsMapKey.description=A GString should not be used as a map key since its hashcode is not guaranteed to be stable. Consider calling key.toString().
GStringAsMapKey.description.html=A GString should not be used as a map key since its hashcode is not guaranteed to be stable. Consider calling <em>key.toString()</em>.

InvertedIfElse.description=An inverted if-else statement is one in which there is a single if statement with a single else branch and the boolean test of the if is negated. For instance "if (!x) false else true". It is usually clearer to write this as "if (x) true else false". 
InvertedIfElse.description.html=An inverted if-else statement is one in which there is a single <em>if</em> statement with a single <em>else</em> branch and the boolean test of the if is negated. For instance <em>if (!x) false else true</em>. It is usually clearer to write this as <em>if (x) true else false</em>.

RemoveAllOnSelf.description=Don't use removeAll to clear a collection. If you want to remove all elements from a collection c, use c.clear, not c.removeAll(c). Calling c.removeAll(c) to clear a collection is less clear, susceptible to errors from typos, less efficient and for some collections, might throw a ConcurrentModificationException.
RemoveAllOnSelf.description.html=Don't use <em>removeAll</em> to clear a collection. If you want to remove all elements from a collection c, use c.clear, not c.removeAll(c). Calling <em>c.removeAll(c)</em> to clear a collection is less clear, susceptible to errors from typos, less efficient and for some collections, might throw a <em>ConcurrentModificationException</em>.

ReturnFromFinallyBlock.description=Returning from a finally block is confusing and can hide the original exception.
ReturnFromFinallyBlock.description.html=Returning from a <em>finally</em> block is confusing and can hide the original exception.

ReturnsNullInsteadOfEmptyArray.description=Consider returning a zero length array rather than null. It is often a better design to return a length zero array rather than a null reference to indicate that there are no results (i.e., an empty list of results). This way, no explicit check for null is needed by clients of the method.
ReturnsNullInsteadOfEmptyArray.description.html=Consider returning a zero length array rather than null. It is often a better design to return a length zero array rather than a null reference to indicate that there are no results (i.e., an empty list of results). This way, no explicit check for null is needed by clients of the method.

ReturnsNullInsteadOfEmptyCollection.description=Consider returning a zero length collection rather than null. It is often a better design to return a length zero collection rather than a null reference to indicate that there are no results (i.e., an empty list of results). This way, no explicit check for null is needed by clients of the method.
ReturnsNullInsteadOfEmptyCollection.description.html=Consider returning a zero length collection rather than null. It is often a better design to return a length zero collection rather than a null reference to indicate that there are no results (i.e., an empty list of results). This way, no explicit check for null is needed by clients of the method.

SerialVersionUID.description=A serialVersionUID is normally intended to be used with Serialization. It needs to be of type long, static, and final. Also, it should have a visibility modifier such as public or private. Providing no modifier creates a Property and Groovy generates a getter, which is probably not intended.
SerialVersionUID.description.html=A serialVersionUID is normally intended to be used with Serialization. It needs to be of type long, static, and final. Also, it should have a visibility modifier such as public or private. Providing no modifier creates a Property and Groovy generates a getter, which is probably not intended.

StringInstantiation.description=Use a String literal (e.g., "...") instead of calling the corresponding String constructor (new String("..")) directly.
StringInstantiation.description.html=Use a String literal (e.g., "...") instead of calling the corresponding String constructor (new String("..")) directly.

ThrowExceptionFromFinallyBlock.description=Throwing an exception from a finally block is confusing and can hide the original exception.
ThrowExceptionFromFinallyBlock.description.html=Throwing an exception from a <em>finally</em> block is confusing and can hide the original exception.

UnsafeCallToNegativeOffset.description=This possible warns of referencing the element at the index of -1 in an Array or List. It is possible to get the last element of a list by calling list[-1], however an empty list will throw an exception for this operation. It is usually better to use the last() method on the list or array to access the last element. The last() method returns the last element of the collection or null if not found. 
UnsafeCallToNegativeOffset.description.html=This possible warns of referencing the element at the index of -1 in an Array or List. It is possible to get the last element of a list by calling list[-1], however an empty list will throw an exception for this operation. It is usually better to use the last() method on the list or array to access the last element. The last() method returns the last element of the collection or null if not found.

#-------------------------------------------------------------------------------
# BRACES rules
#-------------------------------------------------------------------------------
ElseBlockBraces.description=Use braces for else blocks, even for a single statement. By default, braces are not required for an else if it is followed immediately by an if. Set the bracesRequiredForElseIf property to true to require braces is that situation as well.
ElseBlockBraces.description.html=Use braces for <em>else</em> blocks, even for a single statement. By default, braces are not required for an <em>else</em> if it is followed immediately by an <em>if</em>. Set the <em>bracesRequiredForElseIf</em> property to true to require braces is that situation as well.

ForStatementBraces.description=Use braces for for statements, even for a single statement.
ForStatementBraces.description.html=Use braces for <em>for</em> statements, even for a single statement.

IfStatementBraces.description=Use braces for if statements, even for a single statement.
IfStatementBraces.description.html=Use braces for <em>if</em> statements, even for a single statement.

WhileStatementBraces.description=Use braces for while statements, even for a single statement.
WhileStatementBraces.description.html=Use braces for <em>while</em> statements, even for a single statement.

#-------------------------------------------------------------------------------
# CONCURRENCY rules
#-------------------------------------------------------------------------------
NestedSynchronization.description=Nested synchronized statements should be avoided. Nested synchronized statements are either useless (if the lock objects are identical) or prone to deadlock.
NestedSynchronization.description.html=Nested synchronized statements should be avoided. Nested synchronized statements are either useless (if the lock objects are identical) or prone to deadlock.

SynchronizedMethod.description=This rule reports uses of the synchronized keyword on methods. Synchronized methods are the same as synchronizing on 'this', which effectively make your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects.
SynchronizedMethod.description.html=This rule reports uses of the <em>synchronized</em> keyword on methods. Synchronized methods are the same as synchronizing on 'this', which effectively make your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects.

SynchronizedOnGetClass.description=Synchronization on getClass rather than class literal. This instance method synchronizes on this.getClass(). If this class is subclassed, subclasses will synchronize on the class object for the subclass, which isn't likely what was intended.
SynchronizedOnGetClass.description.html=Synchronization on getClass rather than class literal. This instance method synchronizes on this.getClass(). If this class is subclassed, subclasses will synchronize on the class object for the subclass, which isn't likely what was intended.

SynchronizedOnThis.description=This rule reports uses of the synchronized blocks where the synchronization reference is 'this'. Doing this effectively makes your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects.
SynchronizedOnThis.description.html=This rule reports uses of the <em>synchronized</em> blocks where the synchronization reference is 'this'. Doing this effectively makes your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects.

SystemRunFinalizersOnExit.description=Method calls to System.runFinalizersOnExit() should not be allowed. This method is inherently non-thread-safe, may result in data corruption, deadlock, and may effect parts of the program far removed from it's call point. It is deprecated, and it's use strongly discouraged.
SystemRunFinalizersOnExit.description.html=Method calls to <em>System.runFinalizersOnExit()</em> should not be allowed. This method is inherently non-thread-safe, may result in data corruption, deadlock, and may effect parts of the program far removed from it's call point. It is deprecated, and it's use strongly discouraged.

ThreadYield.description=Method calls to Thread.yield() should not be allowed. This method has no useful guaranteed semantics, and is often used by inexperienced programmers to mask race conditions.
ThreadYield.description.html=Method calls to <em>Thread.yield()</em> should not be allowed. This method has no useful guaranteed semantics, and is often used by inexperienced programmers to mask race conditions.

ThreadLocalNotStaticFinal.description=ThreadLocal fields should be static and final. In the most common case a java.lang.ThreadLocal instance associates state with a thread. A non-static non-final java.lang.ThreadLocal field associates state with an instance-thread combination. This is seldom necessary and often a bug which can cause memory leaks and possibly incorrect behavior.
ThreadLocalNotStaticFinal.description.html=<em>ThreadLocal</em> fields should be <em>static</em> and <em>final</em>. In the most common case a <em>java.lang.ThreadLocal</em> instance associates state with a thread. A non-<em>static</em> non-<em>final</em> <em>java.lang.ThreadLocal</em> field associates state with an instance-thread combination. This is seldom necessary and often a bug which can cause memory leaks and possibly incorrect behavior.

UseOfNotifyMethod.description=This code calls notify() rather than notifyAll(). Java monitors are often used for multiple conditions. Calling notify() only wakes up one thread, meaning that the thread woken up might not be the one waiting for the condition that the caller just satisfied.
UseOfNotifyMethod.description.html=This code calls notify() rather than notifyAll(). Java monitors are often used for multiple conditions. Calling notify() only wakes up one thread, meaning that the thread woken up might not be the one waiting for the condition that the caller just satisfied.

VolatileLongOrDoubleField.description=Long or double fields should not be declared as volatile. Java specifies that reads and writes from such fields are atomic, but many JVM's have violated this specification. Unless you are certain of your JVM, it is better to synchronize access to such fields rather than declare them volatile. This rule flags fields marked volatile when their type is double or long or the name of their type is "Double" or "Long".
VolatileLongOrDoubleField.description.html=Long or double fields should not be declared as <em>volatile</em>. Java specifies that reads and writes from such fields are atomic, but many JVM's have violated this specification. Unless you are certain of your JVM, it is better to synchronize access to such fields rather than declare them <em>volatile</em>. This rule flags fields marked <em>volatile</em> when their type is double or long or the name of their type is "Double" or "Long".

#-------------------------------------------------------------------------------
# DESIGN rules
#-------------------------------------------------------------------------------
ImplementationAsType.description=Checks for use of a predefined set of concrete classes (e.g. ArrayList, Hashtable, ConcurrentHashMap) when specifying the type of a method parameter, closure parameter, constructor parameter, method return type or field type. The associated interfaces should be used to specify the type instead.
ImplementationAsType.description.html=Checks for use of a predefined set of concrete classes (e.g. <em>ArrayList</em>, <em>Hashtable</em>, <em>ConcurrentHashMap</em>) when specifying the type of a method parameter, closure parameter, constructor parameter, method return type or field type. The associated interfaces should be used to specify the type instead.

#-------------------------------------------------------------------------------
# DRY rules
#-------------------------------------------------------------------------------
DuplicateNumberLiteral.description=Code containing duplicate number literals can usually be improved by declaring the number as a constant field.  The ignoreNumbers property can optionally specify a comma-separated list of numbers to ignore.
DuplicateNumberLiteral.description.html=Code containing number String literals can usually be improved by declaring the number as a constant field.  The <em>ignoreNumbers</em> property can optionally specify a comma-separated list of numbers to ignore.

DuplicateStringLiteral.description=Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The ignoreStrings property can optionally specify a comma-separated list of Strings to ignore.
DuplicateStringLiteral.description.html=Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The <em>ignoreStrings</em> property can optionally specify a comma-separated list of Strings to ignore.

#-------------------------------------------------------------------------------
# EXCEPTIONS rules
#-------------------------------------------------------------------------------
CatchError.description=Catching Error is dangerous; it can catch exceptions such as ThreadDeath and OutOfMemoryError.
CatchError.description.html=Catching <em>Error</em> is dangerous; it can catch exceptions such as <em>ThreadDeath</em> and <em>OutOfMemoryError</em>.

CatchException.description=Catching Exception is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.
CatchException.description.html=Catching <em>Exception</em> is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.

CatchIllegalMonitorStateException.description=Dubious catching of IllegalMonitorStateException. IllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on).
CatchIllegalMonitorStateException.description.html=Dubious catching of IllegalMonitorStateException. IllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on).

CatchNullPointerException.description=Catching NullPointerException is never appropriate. It should be avoided in the first place with proper null checking, and it can mask underlying errors.
CatchNullPointerException.description.html=Catching <em>NullPointerException</em> is never appropriate. It should be avoided in the first place with proper null checking, and it can mask underlying errors.

CatchRuntimeException.description=Catching RuntimeException is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.
CatchRuntimeException.description.html=Catching <em>RuntimeException</em> is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.

CatchThrowable.description=Catching Throwable is dangerous; it can catch exceptions such as ThreadDeath and OutOfMemoryError.
CatchThrowable.description.html=Catching <em>Throwable</em> is dangerous; it can catch exceptions such as <em>ThreadDeath</em> and <em>OutOfMemoryError</em>.

ConfusingClassNamedException.description=This class is not derived from another exception, but ends with 'Exception'. This will be confusing to users of this class.
ConfusingClassNamedException.description.html=This class is not derived from another exception, but ends with 'Exception'. This will be confusing to users of this class.

ReturnNullFromCatchBlock.description=Returning null from a catch block often masks errors and requires the client to handle error codes. In some coding styles this is discouraged. 
ReturnNullFromCatchBlock.description.html=Returning <em>null</em> from a catch block often masks errors and requires the client to handle error codes. In some coding styles this is discouraged.

ThrowError.description=Checks for throwing an instance of java.lang.Error.
ThrowError.description.html=Checks for throwing an instance of <em>java.lang.Error</em>.

ThrowException.description=Checks for throwing an instance of java.lang.Exception.
ThrowException.description.html=Checks for throwing an instance of <em>java.lang.Exception</em>.

ThrowNullPointerException.description=Checks for throwing an instance of java.lang.NullPointerException.
ThrowNullPointerException.description.html=Checks for throwing an instance of <em>java.lang.NullPointerException</em>.

ThrowRuntimeException.description=Checks for throwing an instance of java.lang.RuntimeException.
ThrowRuntimeException.description.html=Checks for throwing an instance of <em>java.lang.RuntimeException</em>.

ThrowThrowable.description=Checks for throwing an instance of java.lang.Throwable.
ThrowThrowable.description.html=Checks for throwing an instance of <em>java.lang.Throwable</em>.

#-------------------------------------------------------------------------------
# GENERIC rules
#-------------------------------------------------------------------------------
IllegalRegex.description=Checks for a specified illegal regular expression within the source code. The regex property specifies the regular expression to check for. It is required and cannot be null or empty.
IllegalRegex.description.html=Checks for a specified illegal regular expression within the source code. The <em>regex</em> property specifies the regular expression to check for. It is required and cannot be null or empty.

RequiredRegex.description=Checks for a specified regular expression that must exist within the source code. The regex property specifies the regular expression to check for. It is required and cannot be null or empty.
RequiredRegex.description.html=Checks for a specified regular expression that must exist within the source code. The <em>regex</em> property specifies the regular expression to check for. It is required and cannot be null or empty.

StatelessClass.description=Checks for fields on classes that should remain "stateless" and reentrant. The ignoreFieldNames property specifies one or more field names that should be ignored. The ignoreFieldTypes property specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').
StatelessClass.description.html=Checks for fields on classes that should remain "stateless" and reentrant. The <em>ignoreFieldNames</em> property specifies one or more field names that should be ignored. The <em>ignoreFieldTypes</em> property specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').

#-------------------------------------------------------------------------------
# GRAILS rules
#-------------------------------------------------------------------------------
GrailsPublicControllerMethod.description=Checks for public methods on Grails controller classes. Static methods are ignored.
GrailsPublicControllerMethod.description.html=Checks for <em>public</em> methods on Grails controller classes. Static methods are ignored.

GrailsSessionReference.description=Checks for references to the session object from within Grails controller and taglib classes.
GrailsSessionReference.description.html=Checks for references to the <em>session</em> object from within Grails controller and taglib classes.

GrailsServletContextReference.description=Checks for references to the servletContext object from within Grails controller and taglib classes.
GrailsServletContextReference.description.html=Checks for references to the <em>servletContext</em> object from within Grails controller and taglib classes.

GrailsStatelessService.description=Checks for fields on Grails service classes. Grails service classes are singletons, by default, and so they should be reentrant and typically stateless. The ignoreFieldNames property specifies one or more field names that should be ignored. The ignoreFieldTypes property specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').
GrailsStatelessService.description.html=Checks for fields on Grails service classes. Grails service classes are singletons, by default, and so they should be reentrant and typically stateless. The <em>ignoreFieldNames</em> property specifies one or more field names that should be ignored. The <em>ignoreFieldTypes</em> property specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').

#-------------------------------------------------------------------------------
# IMPORTS rules
#-------------------------------------------------------------------------------
DuplicateImport.description=Duplicate import statements are unnecessary.
DuplicateImport.description.html=Duplicate import statements are unnecessary.

ImportFromSamePackage.description=An import of a class that is within the same package is unnecessary.
ImportFromSamePackage.description.html=An import of a class that is within the same package is unnecessary.

UnnecessaryGroovyImport.description=A Groovy file does not need to include an import for classes from java.lang, java.util, java.io, java.net, groovy.lang and groovy.util, as well as the classes java.math.BigDecimal and java.math.BigInteger.
UnnecessaryGroovyImport.description.html=A Groovy file does not need to include an import for classes from <em>java.lang</em>, <em>java.util</em>, <em>java.io</em>, <em>java.net</em>, <em>groovy.lang</em> and <em>groovy.util</em>, as well as the classes <em>java.math.BigDecimal</em> and <em>java.math.BigInteger</em>.

UnusedImport.description=Imports for a class that is never referenced within the source file is unnecessary.
UnusedImport.description.html=Imports for a class that is never referenced within the source file is unnecessary.

#-------------------------------------------------------------------------------
# JUNIT rules
#-------------------------------------------------------------------------------
JUnitSetUpCallsSuper.description=Checks that if the JUnit setUp() method is defined, that it includes a call to super.setUp().
JUnitSetUpCallsSuper.description.html=Checks that if the JUnit <em>setUp()</em> method is defined, that it includes a call to <em>super.setUp()</em>.

JUnitTearDownCallsSuper.description=Checks that if the JUnit tearDown() method is defined, that it includes a call to super.tearDown().
JUnitTearDownCallsSuper.description.html=Checks that if the JUnit <em>tearDown()</em> method is defined, that it includes a call to <em>super.tearDown()</em>.

JUnitAssertAlwaysFails.description=Checks for JUnit assert() method calls with constant arguments such that the assertion always fails. This includes: assertTrue(false), assertFalse(true) and assertNull(CONSTANT).
JUnitAssertAlwaysFails.description.html=Checks for JUnit <em>assert()</em> method calls with constant arguments such that the assertion always fails. This includes: <em>assertTrue(false)</em>, <em>assertFalse(true)</em> and <em>assertNull(CONSTANT)</em>.

JUnitAssertAlwaysSucceeds.description=Checks for JUnit assert() method calls with constant arguments such that the assertion always succeeds. This includes: assertTrue(true), assertFalse(false) and assertNull(null).
JUnitAssertAlwaysSucceeds.description.html=Checks for JUnit <em>assert()</em> method calls with constant arguments such that the assertion always succeeds. This includes: <em>assertTrue(true)</em>, <em>assertFalse(false)</em> and <em>assertNull(null)</em>.

JUnitPublicNonTestMethod.description=Checks if a JUnit test class contains public methods other than standard test methods, JUnit framework methods or methods with JUnit annotations.
JUnitPublicNonTestMethod.description.html=Checks if a JUnit test class contains public methods other than standard test methods, JUnit framework methods or methods with JUnit annotations.

JUnitStyleAssertions.description=This rule detects calling JUnit style assertions like assertEquals, assertTrue, assertFalse, assertNull, assertNotNull. Groovy 1.7 ships with a feature called the "power assert", which is an assert statement with better error reporting. This is preferable to the JUnit assertions.
JUnitStyleAssertions.description.html=This rule detects calling JUnit style assertions like <em>assertEquals</em>, <em>assertTrue</em>, <em>assertFalse</em>, <em>assertNull</em>, <em>assertNotNull</em>. Groovy 1.7 ships with a feature called the "power assert", which is an assert statement with better error reporting. This is preferable to the JUnit assertions.

JUnitUnnecessarySetUp.description=Checks for JUnit setUp() methods that contain only a call to super.setUp().
JUnitUnnecessarySetUp.description.html=Checks for JUnit <em>setUp()</em> methods that contain only a call to <em>super.setUp()</em>.

JUnitUnnecessaryTearDown.description=Checks for JUnit tearDown() methods that contain only a call to super.tearDown().
JUnitUnnecessaryTearDown.description.html=Checks for JUnit <em>tearDown()</em> methods that contain only a call to <em>super.tearDown()</em>.

UseAssertEqualsInsteadOfAssertTrue.description=This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like assertEquals.
UseAssertEqualsInsteadOfAssertTrue.description.html=This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like <em>assertEquals</em>.

UseAssertNullInsteadOfAssertEquals.description=This rule detects JUnit calling assertEquals where the first or second parameter is null. These assertion should be made against the assertNull method instead.
UseAssertNullInsteadOfAssertEquals.description.html=This rule detects JUnit calling <em>assertEquals</em> where the first or second parameter is null. These assertion should be made against the <em>assertNull</em> method instead.

UseAssertSameInsteadOfAssertTrue.description=This rule detects JUnit calling assertTrue where the first or second parameter is an Object#is() call testing for reference equality. These assertion should be made against the assertSame method instead.
UseAssertSameInsteadOfAssertTrue.description.html=This rule detects JUnit calling <em>assertTrue</em> where the first or second parameter is an Object#is() call testing for reference equality. These assertion should be made against the <em>assertSame</em> method instead.

UseAssertTrueInsteadOfAssertEquals.description=This rule detects JUnit calling assertEquals where the first parameter is a boolean. These assertions should be made by more specific methods, like assertTrue or assertFalse.
UseAssertTrueInsteadOfAssertEquals.description.html=This rule detects JUnit calling <em>assertEquals</em> where the first parameter is a boolean. These assertions should be made by more specific methods, like <em>assertTrue</em> or <em>assertFalse</em>.

JUnitFailWithoutMessage.description=This rule detects JUnit calling the fail() method without an argument. For better error reporting you should always provide a message.
JUnitFailWithoutMessage.description.html=This rule detects JUnit calling the <em>fail()</em> method without an argument. For better error reporting you should always provide a message.

JUnitTestMethodWithoutAssert.description=This rule searches for test methods that do not contain assert statements. Either the test method is missing assert statements, which is an error, or the test method contains custom assert statements that do not follow a proper assert naming convention. Test methods are defined as public void methods that begin with the work test or have a @Test annotation. By default this rule applies to the default test class names, but this can be changed using the rule's applyToClassNames property. 
JUnitTestMethodWithoutAssert.description.html=This rule searches for test methods that do not contain assert statements. Either the test method is missing assert statements, which is an error, or the test method contains custom assert statements that do not follow a proper assert naming convention. Test methods are defined as public void methods that begin with the work test or have a @Test annotation. By default this rule applies to the default test class names, but this can be changed using the rule's applyToClassNames property.

#-------------------------------------------------------------------------------
# LOGGING rules
#-------------------------------------------------------------------------------
PrintStackTrace.description=Checks for calls to printStackTrace().
PrintStackTrace.description.html=Checks for calls to <em>printStackTrace()</em>.

Println.description=Checks for calls to this.print(), this.println() or this.printf().
Println.description.html=Checks for calls to <em>this.print()</em>, <em>this.println()</em> or <em>this.printf()</em>.

SystemErrPrint.description=Checks for calls to System.err.print(), System.err.println() or System.err.printf().
SystemErrPrint.description.html=Checks for calls to <em>System.err.print()</em>, <em>System.err.println()</em> or <em>System.err.printf()</em>.

SystemOutPrint.description=Checks for calls to System.out.print(), System.out.println() or System.out.printf().
SystemOutPrint.description.html=Checks for calls to <em>System.out.print()</em>, <em>System.out.println()</em> or <em>System.out.printf()</em>.

#-------------------------------------------------------------------------------
# NAMING rules
#-------------------------------------------------------------------------------
AbstractClassName.description=Verifies that the name of an abstract class matches a regular expression specified in the regex property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active. This rule ignores interfaces.
AbstractClassName.description.html=Verifies that the name of an abstract class matches a regular expression specified in the <em>regex</em> property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active. This rule ignores interfaces.

ClassName.description=Verifies that the name of a class matches a regular expression. By default it checks that the class name starts with an uppercase letter and is followed by zero or more word characters (letters, numbers or underscores). The regex property specifies the regular expression used to validate the class name.
ClassName.description.html=Verifies that the name of a class matches a regular expression. By default it checks that the class name starts with an uppercase letter and is followed by zero or more word characters (letters, numbers or underscores). The <em>regex</em> property specifies the regular expression used to validate the class name.

FieldName.description=Verifies that the name of each field matches a regular expression. By default it checks that non-'final' field names start with a lowercase letter and contains only letters or numbers, and 'final' field names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The regex property specifies the default regular expression used to validate field names. The finalRegex property specifies the regular expression to validate 'final' field names. The staticRegex property specifies the regular expression to validate 'static' field names. The staticFinalRegex property specifies the regular expression to validate 'static final' field names.  The ignoreFieldNames property can specify field names that should be ignored, optionally containing wildcard characters ('*' or '?').
FieldName.description.html=Verifies that the name of each field matches a regular expression. By default it checks that non-'final' field names start with a lowercase letter and contains only letters or numbers, and 'final' field names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The <em>regex</em> property specifies the default regular expression used to validate field names. The <em>finalRegex</em> property specifies the regular expression to validate 'final' field names. The <em>staticRegex</em> property specifies the regular expression to validate 'static' field names. The <em>staticFinalRegex</em> property specifies the regular expression to validate 'static final' field names.  The <em>ignoreFieldNames</em> property can specify field names that should be ignored, optionally containing wildcard characters ('*' or '?').

InterfaceName.description=Verifies that the name of an interface matches a regular expression specified in the regex property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active.
InterfaceName.description.html=Verifies that the name of an interface matches a regular expression specified in the <em>regex</em> property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active.

MethodName.description=Verifies that the name of each method matches a regular expression. By default it checks that the method name starts with a lowercase letter. The regex property specifies the regular expression to check the method name against.  The ignoreMethodNames property can specify method names that should be ignored, optionally containing wildcard characters ('*' or '?').
MethodName.description.html=Verifies that the name of each method matches a regular expression. By default it checks that the method name starts with a lowercase letter. The <em>regex</em> property specifies the regular expression to check the method name against.  The <em>ignoreMethodNames</em> property can specify method names that should be ignored, optionally containing wildcard characters ('*' or '?').

ObjectOverrideMisspelledMethodName.description=Verifies that the names of the most commonly overridden methods of Object: equals, hashCode and toString, are correct.
ObjectOverrideMisspelledMethodName.description.html=Verifies that the names of the most commonly overridden methods of Object: <em>equals</em>, <em>hashCode</em> and <em>toString</em>, are correct.

PackageName.description=Verifies that the package name for a class matches a regular expression. By default it checks that the package name consists of only lowercase letters, separated by periods. The regex property specifies the regular expression used to validate the package name. The packageNameRequired property indicates whether a package name declaration is required for all classes.
PackageName.description.html=Verifies that the package name for a class matches a regular expression. By default it checks that the package name consists of only lowercase letters, separated by periods. The <em>regex</em> property specifies the regular expression used to validate the package name. The <em>packageNameRequired</em> property indicates whether a package name declaration is required for all classes.

ParameterName.description=Verifies that the name of each parameter matches a regular expression. This rule applies to method parameters, constructor parameters and closure parameters. By default it checks that parameter names start with a lowercase letter and contains only letters or numbers. The regex property specifies the default regular expression used to validate the parameter name.  The ignoreParameterNames property can specify parameter names that should be ignored, optionally containing wildcard characters ('*' or '?').
ParameterName.description.html=Verifies that the name of each parameter matches a regular expression. This rule applies to method parameters, constructor parameters and closure parameters. By default it checks that parameter names start with a lowercase letter and contains only letters or numbers. The <em>regex</em> property specifies the default regular expression used to validate the parameter name.  The <em>ignoreParameterNames</em> property can specify parameter names that should be ignored, optionally containing wildcard characters ('*' or '?').

VariableName.description=Verifies that the name of each method matches a regular expression. By default it checks that non-'final' variable names start with a lowercase letter and contains only letters or numbers, and 'final' variable names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The regex property specifies the default regular expression used to validate a non-'final' variable name. The finalRegex property specifies the regular expression used to validate 'final' variable names. The ignoreVariableNames property can specify variable names that should be ignored, optionally containing wildcard characters ('*' or '?').
VariableName.description.html=Verifies that the name of each method matches a regular expression. By default it checks that non-'final' variable names start with a lowercase letter and contains only letters or numbers, and 'final' variable names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The <em>regex</em> property specifies the default regular expression used to validate a non-'final' variable name. The <em>finalRegex</em> property specifies the regular expression used to validate 'final' variable names. The <em>ignoreVariableNames</em> property can specify variable names that should be ignored, optionally containing wildcard characters ('*' or '?').

PropertyName.description=Verifies that the name of each property matches a regular expression. By default it checks that property names other than 'static final' start with a lowercase letter and contains only letters or numbers, and 'static final' property names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The regex property specifies the default regular expression used to validate property names. The finalRegex property specifies the regular expression to validate 'final' property names. The staticRegex property specifies the regular expression to validate 'static' property names. The staticFinalRegex property specifies the regular expression to validate 'static final' property names.  The ignorePropertyNames property can specify property names that should be ignored, optionally containing wildcard characters ('*' or '?').
PropertyName.description.html=Verifies that the name of each property matches a regular expression. By default it checks that property names other than 'static final' start with a lowercase letter and contains only letters or numbers, and 'static final' property names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The <em>regex</em> property specifies the default regular expression used to validate property names. The <em>finalRegex</em> property specifies the regular expression to validate 'final' property names. The <em>staticRegex</em> property specifies the regular expression to validate 'static' property names. The <em>staticFinalRegex</em> property specifies the regular expression to validate 'static final' property names.  The <em>ignorePropertyNames</em> property can specify property names that should be ignored, optionally containing wildcard characters ('*' or '?').

ConfusingMethodName.description=Checks for confusing method names. The referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other.
ConfusingMethodName.description.html=Checks for confusing method names. The referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other.

#-------------------------------------------------------------------------------
# SIZE/COMPLEXITY rules
#-------------------------------------------------------------------------------
AbcComplexity.description=Checks the ABC metric of size/complexity for methods/classes.\
  A method (or "closure field") with an ABC complexity value (score) greater than the maxMethodComplexity \
  property (which defaults to 60) causes a violation. Likewise, a class that has an (average method) ABC complexity\
  value greater than the maxClassAverageMethodComplexity property (which defaults to 60) causes a violation.
AbcComplexity.description.html=Checks the ABC metric of size/complexity for methods/classes.\
  A method (or "closure field") with an ABC complexity value (score) greater than the <em>maxMethodComplexity</em> \
  property (which defaults to 60) causes a violation. Likewise, a class that has an (average method) ABC complexity\
  value greater than the <em>maxClassAverageMethodComplexity</em> property (which defaults to 60) causes a violation.

ClassSize.description=Checks if the size of a class exceeds the number of lines specified by the maxLines property, which defaults to 1000.
ClassSize.description.html=Checks if the size of a class exceeds the number of lines specified by the <em>maxLines</em> property, which defaults to 1000.

CyclomaticComplexity.description=Checks the cyclomatic complexity for methods/classes.\
  A method (or "closure field") with a cyclomatic complexity value greater than the maxMethodComplexity \
  property (which defaults to 20) causes a violation. Likewise, a class that has an (average method) cyclomatic complexity\
  value greater than the maxClassAverageMethodComplexity property (which defaults to 20) causes a violation.
CyclomaticComplexity.description.html=Checks the cyclomatic complexity for methods/classes.\
  A method (or "closure field") with a cyclomatic complexity value greater than the <em>maxMethodComplexity</em> \
  property (which defaults to 20) causes a violation. Likewise, a class that has an (average method) cyclomatic complexity\
  value greater than the <em>maxClassAverageMethodComplexity</em> property (which defaults to 20) causes a violation.

MethodCount.description=A class with too many methods is probably a good suspect for refactoring, in order to reduce its \
  complexity and find a way to have more fine grained objects. The <em>maxMethods</em> property specifies the threshhold,\
  which defaults to 30.
MethodCount.description.html=A class with too many methods is probably a good suspect for refactoring, in order to reduce its \
  complexity and find a way to have more fine grained objects.The <em>maxMethods</em> property specifies the threshhold,\
  which defaults to 30.

MethodSize.description=Checks if the size of a method exceeds the number of lines specified by the maxLines property, which defaults to 100.
MethodSize.description.html=Checks if the size of a method exceeds the number of lines specified by the <em>maxLines</em> property, which defaults to 100.

NestedBlockDepth.description=Checks for blocks or closures nested more than maxNestedBlockDepth levels deep, which defaults to 5.
NestedBlockDepth.description.html=Checks for blocks or closures nested more than <em>maxNestedBlockDepth</em> levels deep, which defaults to 5.

#-------------------------------------------------------------------------------
# UNNECESSARY rules
#-------------------------------------------------------------------------------
UnnecessaryBigDecimalInstantiation.description=It is unnecessary to instantiate BigDecimal objects. Instead just use the decimal literal or the 'G' identifier to force the type, such as 123.45 or 123.45G.
UnnecessaryBigDecimalInstantiation.description.html=It is unnecessary to instantiate BigDecimal objects. Instead just use the decimal literal or the 'G' identifier to force the type, such as 123.45 or 123.45G.

UnnecessaryBigIntegerInstantiation.description=It is unnecessary to instantiate BigInteger objects. Instead just use the literal with the 'G' identifier to force the type, such as 8G or 42G.
UnnecessaryBigIntegerInstantiation.description.html=It is unnecessary to instantiate BigInteger objects. Instead just use the literal with the 'G' identifier to force the type, such as 8G or 42G.

UnnecessaryBooleanExpression.description=Checks for unnecessary boolean expressions, including ANDing (&&) or ORing (||) with true, false, null, or a Map/List/String/Number literal. Also checks for negation (!) of true, false, null, or a Map/List/String/Number literal.
UnnecessaryBooleanExpression.description.html=Checks for unnecessary boolean expressions, including ANDing (&&) or ORing (||) with <em>true</em>, <em>false</em>, <em>null</em>, or a Map/List/String/Number literal. Also checks for negation (!) of <em>true</em>, <em>false</em>, <em>null</em>, or a Map/List/String/Number literal.

UnnecessaryCallForLastElement.description=This rule checks for excessively verbose methods of accessing the last element of an array or list. For instance, it is possible to access the last element of an array by performing array[array.length - 1], in Groovy it is simpler to either call array.last() or array[-1]. The same is true for lists. This violation is triggered whenever a get, getAt, or array-style access is used with an object size check. 
UnnecessaryCallForLastElement.description.html=This rule checks for excessively verbose methods of accessing the last element of an array or list. For instance, it is possible to access the last element of an array by performing array[array.length - 1], in Groovy it is simpler to either call array.last() or array[-1]. The same is true for lists. This violation is triggered whenever a get, getAt, or array-style access is used with an object size check.

UnnecessaryConstructor.description=This rule detects when a constructor is not necessary; i.e., when there's only one constructor, it's public, has an empty body, and takes no arguments.
UnnecessaryConstructor.description.html=This rule detects when a constructor is not necessary; i.e., when there's only one constructor, it's public, has an empty body, and takes no arguments.

UnnecessaryDoubleInstantiation.description=It is unnecessary to instantiate Double objects. Instead just use the double literal or the 'D' identifier to force the type, such as 123.45d or 0.42d.
UnnecessaryDoubleInstantiation.description.html=It is unnecessary to instantiate Double objects. Instead just use the double literal or the 'D' identifier to force the type, such as 123.45d or 0.42d.

UnnecessaryFloatInstantiation.description=It is unnecessary to instantiate Float objects. Instead just use the float literal with the 'F' identifier to force the type, such as 123.45F or 0.42f.
UnnecessaryFloatInstantiation.description.html=It is unnecessary to instantiate Float objects. Instead just use the float literal with the 'F' identifier to force the type, such as 123.45F or 0.42f.

UnnecessaryGetter.description=Checks for explicit calls to getter/accessor methods which can, for the most part, be replaced by property access. A getter is defined as a method call that matches get[A-Z] but not getClass() or get[A-Z][A-Z] such as getURL(). Getters do not take method arguments.
UnnecessaryGetter.description.html=Checks for explicit calls to getter/accessor methods which can, for the most part, be replaced by property access. A getter is defined as a method call that matches get[A-Z] but not getClass() or get[A-Z][A-Z] such as getURL(). Getters do not take method arguments.

UnnecessaryIfStatement.description=Checks for if statements where the if and else blocks are merely returning true and false constants. These cases can be replaced by a simple return statement.
UnnecessaryIfStatement.description.html=Checks for <em>if</em> statements where the if and else blocks are merely returning <em>true</em> and <em>false</em> constants. These cases can be replaced by a simple return statement.

UnnecessaryObjectReferences.description=Violations are triggered when an excessive set of consecutive statements all reference the same variable. This can be made more readable by using a with or identity block. 
UnnecessaryObjectReferences.description.html=Violations are triggered when an excessive set of consecutive statements all reference the same variable. This can be made more readable by using a with or identity block.

UnnecessaryTernaryExpression.description=Checks for ternary expressions where the conditional expression always evaluates to a boolean and the true and false expressions are merely returning true and false constants. Also checks for ternary expressions where both expressions are the same constant or variable.
UnnecessaryTernaryExpression.description.html=Checks for ternary expressions where the conditional expression always evaluates to a boolean and the true and false expressions are merely returning <em>true</em> and <em>false</em> constants. Also checks for ternary expressions where both expressions are the same constant or variable.

UnnecessaryReturnKeyword.description=In Groovy, the return keyword is often optional. If a statement is the last line in a method or closure then you do not need to have the return keyword.
UnnecessaryReturnKeyword.description.html=In Groovy, the return <em>keyword</em> is often optional. If a statement is the last line in a method or closure then you do not need to have the <em>return</em> keyword.

UnnecessaryIntegerInstantiation.description=It is unnecessary to instantiate Integer objects. Instead just use the literal with the 'I' identifier to force the type, such as 8I or 42i. 
UnnecessaryIntegerInstantiation.description.html=It is unnecessary to instantiate Integer objects. Instead just use the literal with the 'I' identifier to force the type, such as 8I or 42i.

UnnecessaryLongInstantiation.description=It is unnecessary to instantiate Long objects. Instead just use the literal with the 'L' identifier to force the type, such as 8L or 42L.
UnnecessaryLongInstantiation.description.html=It is unnecessary to instantiate Long objects. Instead just use the literal with the 'L' identifier to force the type, such as 8L or 42L.

UnnecessaryOverridingMethod.description=The overriding method merely calls the same method defined in a superclass
UnnecessaryOverridingMethod.description.html=The overriding method merely calls the same method defined in a superclass

UnnecessaryCollectionCall.description=Useless call to collections. This call doesn't make sense. For any collection c, calling c.containsAll(c) should always be true, and c.retainAll(c) should have no effect.
UnnecessaryCollectionCall.description.html=Useless call to collections. This call doesn't make sense. For any collection c, calling <em>c.containsAll(c)</em> should always be true, and <em>c.retainAll(c)</em> should have no effect.

UnnecessaryCatchBlock.description=Violations are triggered when a catch block does nothing but throw the original exception. In this scenario there is usually no need for a catch block, just let the exception be thrown from the original code. This condition frequently occurs when catching an exception for debugging purposes but then forgetting to take the catch statement out. 
UnnecessaryCatchBlock.description.html=Violations are triggered when a catch block does nothing but throw the original exception. In this scenario there is usually no need for a catch block, just let the exception be thrown from the original code. This condition frequently occurs when catching an exception for debugging purposes but then forgetting to take the catch statement out.

UnnecessaryCollectCall.description=Some method calls to Object.collect(Closure) can be replaced with the spread operator. For instance, list.collect { it.multiply(2) } can be replaced by list*.multiply(2).
UnnecessaryCollectCall.description.html=Some method calls to Object.collect(Closure) can be replaced with the spread operator. For instance, list.collect { it.multiply(2) } can be replaced by list*.multiply(2).

#-------------------------------------------------------------------------------
# UNUSED rules
#-------------------------------------------------------------------------------
UnusedArray.description=Checks for array allocations that are not assigned or used, unless it is the last statement within a block.
UnusedArray.description.html=Checks for array allocations that are not assigned or used, unless it is the last statement within a block.

UnusedObject.description=Checks for object allocations that are not assigned or used, unless it is the last statement within a block.
UnusedObject.description.html=Checks for object allocations that are not assigned or used, unless it is the last statement within a block

UnusedPrivateField.description=Checks for private fields that are not referenced within the same class.
UnusedPrivateField.description.html=Checks for private fields that are not referenced within the same class.

UnusedPrivateMethod.description=Checks for private methods that are not referenced within the same class.
UnusedPrivateMethod.description.html=Checks for private methods that are not referenced within the same class.

UnusedVariable.description=Checks for variables that are never referenced.
UnusedVariable.description.html=Checks for variables that are never referenced.

#-------------------------------------------------------------------------------
# HTML Report
#-------------------------------------------------------------------------------
htmlReport.titlePrefix=CodeNarc Report
htmlReport.reportTimestamp.label=Report timestamp:
htmlReport.summary.title=Summary by Package
htmlReport.summary.packageHeading=Package
htmlReport.summary.totalFilesHeading=Total Files
htmlReport.summary.filesWithViolationsHeading=Files with Violations
htmlReport.summary.priority1Heading=Priority 1
htmlReport.summary.priority2Heading=Priority 2
htmlReport.summary.priority3Heading=Priority 3
htmlReport.summary.allPackages=All Packages
htmlReport.violations.ruleName=Rule Name
htmlReport.violations.priority=Priority
htmlReport.violations.lineNumber=Line #
htmlReport.violations.sourceLine=Source Line / Message
htmlReport.ruleDescriptions.title=Rule Descriptions
htmlReport.ruleDescriptions.ruleNameHeading=Rule Name
htmlReport.ruleDescriptions.descriptionHeading=Description
