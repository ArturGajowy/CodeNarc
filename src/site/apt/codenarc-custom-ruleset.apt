		--------------------------------------------------
					  CodeNarc - Creating a RuleSet
		--------------------------------------------------

CodeNarc - Creating a RuleSet
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  You can use the predefined <RuleSets> distributed with <<CodeNarc>> or you can create your own
  custom <RuleSet>. See the site navigation menu for a list of the <RuleSets> and
  rules provided out of the box by <<CodeNarc>>.


* Custom RuleSet XML Schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  The XML schema for a <<CodeNarc>> <RuleSet> file is embodied in the "ruleset-schema.xsd" file which
  is included within the <<CodeNarc>> jar. It contains three sections, all of which are optional, though
  the sections must be in the order listed:

*-----------------------+--------------------------------------------------------------+--------------------------+
| <<XML Tag>>           | <<Purpose>>                                                  | <<How many are allowed>> |
*-----------------------+--------------------------------------------------------------+--------------------------+
| <<<\<description\>>>> | Describe the purpose of the <RuleSet>                        |  Zero or one             |
*-----------------------+--------------------------------------------------------------+--------------------------+
| <<<\<ruleset-ref\>>>> | Include a nested <RuleSet>, optionally configuring and/or    |  Zero or more            |
|                       | filtering the rules within it.                               |                          |
*-----------------------+--------------------------------------------------------------+--------------------------+
| <<<\<rule\>>>>        | Include a single rule; specify its fully-qualified classname |  Zero or more            |
*-----------------------+--------------------------------------------------------------+--------------------------+


* A Sample RuleSet
~~~~~~~~~~~~~~~~~~~

  Here is an example XML <RuleSet> file:

+----------------------------------------------------------------------------------------
<ruleset xmlns="http://codenarc.org/ruleset/1.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://codenarc.org/ruleset/1.0 http://codenarc.org/ruleset-schema.xsd"
        xsi:noNamespaceSchemaLocation="http://codenarc.org/ruleset-schema.xsd">

    <description>Sample rule set</description>

    <ruleset-ref path='rulesets/imports.xml'>
        <rule-config name='DuplicateImport'>
            <property name='priority' value='1'/>
        </rule-config>
    </ruleset-ref>

    <ruleset-ref path='rulesets/basic.xml'>
        <exclude name='StringInstantiation'/>
    </ruleset-ref>

    <rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name="name" value="AuthorTagNotAllowed"/>
        <property name='regex' value='\@author'/>
    </rule>

</ruleset>
+----------------------------------------------------------------------------------------

  Things to note:

    * The <RuleSet> file itself must be accessible on the classpath.

    * The top-level \<ruleset\> element must include the namespace declaration shown.

  About the \<ruleset-ref\> elements:

    * The <path> of the \<ruleset-ref\> is relative to the classpath.

    * You can optionally set arbitrary properties for the rules within the <RuleSet> by
    including one or more \<property\> elements within a \<rule-config\> element. In the example
    above, the <<DuplicateImportRule>> <priority> property is set to 1. Properties set
    this way can be of type <String>, <int>, <long> or <boolean>.

    * Remember that the <name> for a \<rule-config\> specifies the rule <name>, not the class name.
    (In most cases, the rule <name> is the class name without the "Rule" suffix.)


  About the \<rule\> elements:

    * You must specify the fully-qualified class name for each <Rule>.

    * The <Rule> class must be available on the classpath.

    * You can optionally set arbitrary properties for individual rules by including a
      \<property\> element within a \<rule\>. For the <<IllegalRegexRule>> rule above,
      the <name> property is set to "AuthorTagNotAllowed" and the <regex> property is
      set to "\@author". Properties set this way can be of type <String>,
      <int>, <long> or <boolean>.

    * Because the <name> property is customized for the <<IllegalRegexRule>>,
      the localized rule description will be retrieved from the custom messages resource
      bundle file ("codenarc-messages.properties"), if that bundle file exists, otherwise
      a default generic message will be used. The resource bundle message key will be based
      on the customized name. In this case, the message key will be "AuthorTagNotAllowed.description".


* Filtering Rules Within a RuleSet
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  You can use the \<include\> and \<exclude\> elements within a \<ruleset-ref\> to filter a <RuleSet>
  and include and/or the exclude individual rules. In the following <RuleSet> excerpt, the entire
  "rulesets/basic.xml" <RuleSet> is included, except for the <<BooleanInstantiationRule>> and
  <<StringInstantiationRule>>.

+----------------------------------------------------------------------------------------
    <ruleset-ref path='rulesets/basic.xml'>
        <exclude name='BooleanInstantiation'/>
        <exclude name='StringInstantiation'/>
    </ruleset-ref>
+----------------------------------------------------------------------------------------

  Alternatively, you may wish to explicitly specify the rules that you want included from a <RuleSet>
  rather than those that are excluded.  In the following <RuleSet> excerpt, ONLY the
  <<ReturnFromFinallyBlockRule>> and <<StringInstantiationRule>> rules are included from the
   "rulesets/basic.xml" <RuleSet>.

+----------------------------------------------------------------------------------------
    <ruleset-ref path='rulesets/basic.xml'>
        <include name='ReturnFromFinallyBlockRule'/>
        <include name='StringInstantiation'/>
    </ruleset-ref>
+----------------------------------------------------------------------------------------

  <<Note>>: In all cases, the rule <name> is specified, not the class name. (In most cases, the rule <name> is
  the class name without the "Rule" suffix.)

  <<Note>>: If you specify at least one \<include\>, then ONLY rules matching an \<include\> will be included.

  <<Note>>: If you specify an \<include\> and an \<exclude\> for a rule, then the \<exclude\> takes precedence.


** Using Wildcards Within \<include\> and \<exclude\> Names
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  You may optionally include wildcard characters ('*' or '?') in the rule <name> for both
  \<include\> and an \<exclude\> elements. The wildcard character '*' within the <name> matches a
  sequence of zero or more characters in the rule name, while the wildcard character '?' within the
  <name> matches exactly one character in the rule name.

  In the following <RuleSet> excerpt, all rules matching '*Instantiation' are included from the
  "rulesets/basic.xml" <RuleSet>. In this case, that will include the <<StringInstantiationRule>>
  and <<BooleanInstantiationRule>> rules. 

+----------------------------------------------------------------------------------------
    <ruleset-ref path='rulesets/basic.xml'>
        <include name='*Instantiation'/>
    </ruleset-ref>
+----------------------------------------------------------------------------------------


