# Resource Bundle for CodeNarc messages

#-------------------------------------------------------------------------------
# BASIC rules
#-------------------------------------------------------------------------------
BooleanInstantiation.description=Use Boolean.valueOf() for variable values or Boolean.TRUE and Boolean.FALSE for constant values instead of calling the Boolean() constructor directly or calling Boolean.valueOf(true) or Boolean.valueOf(false).
BooleanInstantiation.description.html=Use <em>Boolean.valueOf()</em> for variable values or <em>Boolean.TRUE</em> and <em>Boolean.FALSE</em> for constant values instead of calling the <em>Boolean()</em> constructor directly or calling <em>Boolean.valueOf(true)</em> or <em>Boolean.valueOf(false)</em>.

ConstantIfExpression.description=Checks for if statements with a constant value for the if expression, such as true, false, null, or a literal constant value.
ConstantIfExpression.description.html=Checks for <em>if</em> statements with a constant value for the if expression, such as <em>true</em>, <em>false</em>, <em>null</em>, or a literal constant value.

ConstantTernaryExpression.description=Checks for ternary expressions with a constant value for the boolean expression, such as true, false, null, or a literal constant value.
ConstantTernaryExpression.description.html=Checks for ternary expressions with a constant value for the boolean expression, such as <em>true</em>, <em>false</em>, <em>null</em>, or a literal constant value.

EmptyCatchBlock.description=In most cases, exceptions should not be caught and ignored (swallowed).
EmptyCatchBlock.description.html=In most cases, exceptions should not be caught and ignored (swallowed).

EmptyTryBlock.description=Empty try blocks are confusing and serve no purpose.
EmptyTryBlock.description.html=Empty <em>try</em> blocks are confusing and serve no purpose.

EmptyFinallyBlock.description=Empty finally blocks are confusing and serve no purpose.
EmptyFinallyBlock.description.html=Empty <em>finally</em> blocks are confusing and serve no purpose.

EmptyIfStatement.description=Empty if statements are confusing and serve no purpose.
EmptyIfStatement.description.html=Empty <em>if</em> statements are confusing and serve no purpose.

EmptyElseBlock.description=Empty else blocks are confusing and serve no purpose.
EmptyElseBlock.description.html=Empty <em>else</em> blocks are confusing and serve no purpose.

EmptyForStatement.description=Empty for statements are confusing and serve no purpose.
EmptyForStatement.description.html=Empty <em>for</em> statements are confusing and serve no purpose.

EmptySwitchStatement.description=Empty switch statements are confusing and serve no purpose.
EmptySwitchStatement.description.html=Empty <em>switch</em> statements are confusing and serve no purpose.

EmptyWhileStatement.description=Empty while statements are confusing and serve no purpose.
EmptyWhileStatement.description.html=Empty <em>while</em> statements are confusing and serve no purpose.

EmptySynchronizedStatement.description=Empty synchronized statements are confusing and serve no purpose.
EmptySynchronizedStatement.description.html=Empty <em>synchronized</em> statements are confusing and serve no purpose.

EqualsAndHashCode.description=If either the equals(Object) or the hashCode() methods are overridden within a class, then both must be overridden.
EqualsAndHashCode.description.html=If either the <em>boolean equals(Object)</em> or the <em>int hashCode()</em> methods are overridden within a class, then both must be overridden.

ReturnFromFinallyBlock.description=Returning from a finally block is confusing and can hide the original exception.
ReturnFromFinallyBlock.description.html=Returning from a <em>finally</em> block is confusing and can hide the original exception.

StringInstantiation.description=Use a String literal (e.g., "...") instead of calling the corresponding String constructor (new String("..")) directly.
StringInstantiation.description.html=Use a String literal (e.g., "...") instead of calling the corresponding String constructor (new String("..")) directly.

ThrowExceptionFromFinallyBlock.description=Throwing an exception from a finally block is confusing and can hide the original exception.
ThrowExceptionFromFinallyBlock.description.html=Throwing an exception from a <em>finally</em> block is confusing and can hide the original exception.

UnnecessaryTernaryExpression.description=Checks for ternary expressions where the true and false expressions are merely returning true and false constants or where both expressions are exactly the same.
UnnecessaryTernaryExpression.description.html=Checks for ternary expressions where the true and false expressions are merely returning <em>true</em> and <em>false</em> constants or where both expressions are exactly the same.

#-------------------------------------------------------------------------------
# BRACES rules
#-------------------------------------------------------------------------------
ElseBlockBraces.description=Use braces for else blocks, even for a single statement. By default, braces are not required for an else if it is followed immediately by an if. Set the bracesRequiredForElseIf property to true to require braces is that situation as well.
ElseBlockBraces.description.html=Use braces for <em>else</em> blocks, even for a single statement. By default, braces are not required for an <em>else</em> if it is followed immediately by an <em>if</em>. Set the <em>bracesRequiredForElseIf</em> property to true to require braces is that situation as well.

ForStatementBraces.description=Use braces for for statements, even for a single statement.
ForStatementBraces.description.html=Use braces for <em>for</em> statements, even for a single statement.

IfStatementBraces.description=Use braces for if statements, even for a single statement.
IfStatementBraces.description.html=Use braces for <em>if</em> statements, even for a single statement.

WhileStatementBraces.description=Use braces for while statements, even for a single statement.
WhileStatementBraces.description.html=Use braces for <em>while</em> statements, even for a single statement.

#-------------------------------------------------------------------------------
# CONCURRENCY rules
#-------------------------------------------------------------------------------
SynchronizedMethod.description=This rule reports uses of the synchronized keyword on methods. Synchronized methods are the same as synchronizing on 'this', which effectively make your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects.
SynchronizedMethod.description.html=This rule reports uses of the <em>synchronized</em> keyword on methods. Synchronized methods are the same as synchronizing on 'this', which effectively make your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects.

SynchronizedOnThis.description=This rule reports uses of the synchronized blocks where the synchronization reference is 'this'. Doing this effectively makes your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects.
SynchronizedOnThis.description.html=This rule reports uses of the <em>synchronized</em> blocks where the synchronization reference is 'this'. Doing this effectively makes your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects.

#-------------------------------------------------------------------------------
# DESIGN rules
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# EXCEPTIONS rules
#-------------------------------------------------------------------------------
CatchError.description=Catching Error is dangerous; it can catch exceptions such as ThreadDeath and OutOfMemoryError.
CatchError.description.html=Catching <em>Error</em> is dangerous; it can catch exceptions such as <em>ThreadDeath</em> and <em>OutOfMemoryError</em>.

CatchException.description=Catching Exception is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.
CatchException.description.html=Catching <em>Exception</em> is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.

CatchNullPointerException.description=Catching NullPointerException is never appropriate. It should be avoided in the first place with proper null checking, and it can mask underlying errors.
CatchNullPointerException.description.html=Catching <em>NullPointerException</em> is never appropriate. It should be avoided in the first place with proper null checking, and it can mask underlying errors.

CatchRuntimeException.description=Catching RuntimeException is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.
CatchRuntimeException.description.html=Catching <em>RuntimeException</em> is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.

CatchThrowable.description=Catching Throwable is dangerous; it can catch exceptions such as ThreadDeath and OutOfMemoryError.
CatchThrowable.description.html=Catching <em>Throwable</em> is dangerous; it can catch exceptions such as <em>ThreadDeath</em> and <em>OutOfMemoryError</em>.

ThrowError.description=Checks for throwing an instance of java.lang.Error.
ThrowError.description.html=Checks for throwing an instance of <em>java.lang.Error</em>.

ThrowException.description=Checks for throwing an instance of java.lang.Exception.
ThrowException.description.html=Checks for throwing an instance of <em>java.lang.Exception</em>.

ThrowNullPointerException.description=Checks for throwing an instance of java.lang.NullPointerException.
ThrowNullPointerException.description.html=Checks for throwing an instance of <em>java.lang.NullPointerException</em>.

ThrowRuntimeException.description=Checks for throwing an instance of <em>java.lang.RuntimeException</em>.
ThrowRuntimeException.description.html=Checks for throwing an instance of java.lang.RuntimeException.

ThrowThrowable.description=Checks for throwing an instance of java.lang.Throwable.
ThrowThrowable.description.html=Checks for throwing an instance of <em>java.lang.Throwable</em>.

#-------------------------------------------------------------------------------
# GENERIC rules
#-------------------------------------------------------------------------------
IllegalRegex.description=Checks for a specified illegal regular expression within the source code. The regex property specifies the regular expression to check for. It is required and cannot be null or empty.
IllegalRegex.description.html=Checks for a specified illegal regular expression within the source code. The <em>regex</em> property specifies the regular expression to check for. It is required and cannot be null or empty.

RequiredRegex.description=Checks for a specified regular expression that must exist within the source code. The regex property specifies the regular expression to check for. It is required and cannot be null or empty.
RequiredRegex.description.html=Checks for a specified regular expression that must exist within the source code. The <em>regex</em> property specifies the regular expression to check for. It is required and cannot be null or empty.

StatelessClass.description=Checks for fields on classes that should remain "stateless" and reentrant. The ignoreFieldNames property specifies one or more field names that should be ignored. The ignoreFieldTypes property specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').
StatelessClass.description.html=Checks for fields on classes that should remain "stateless" and reentrant. The <em>ignoreFieldNames</em> property specifies one or more field names that should be ignored. The <em>ignoreFieldTypes</em> property specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').

#-------------------------------------------------------------------------------
# GRAILS rules
#-------------------------------------------------------------------------------
GrailsPublicControllerMethod.description=Checks for public methods on Grails controller classes. Static methods are ignored.
GrailsPublicControllerMethod.description.html=Checks for <em>public</em> methods on Grails controller classes. Static methods are ignored.

GrailsSessionReference.description=Checks for references to the session object from within Grails controller and taglib classes.
GrailsSessionReference.description.html=Checks for references to the <em>session</em> object from within Grails controller and taglib classes.

GrailsServletContextReference.description=Checks for references to the servletContext object from within Grails controller and taglib classes.
GrailsServletContextReference.description.html=Checks for references to the <em>servletContext</em> object from within Grails controller and taglib classes.

GrailsStatelessService.description=Checks for fields on Grails service classes. Grails service classes are singletons, by default, and so they should be reentrant and typically stateless. The ignoreFieldNames property specifies one or more field names that should be ignored. The ignoreFieldTypes property specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').
GrailsStatelessService.description.html=Checks for fields on Grails service classes. Grails service classes are singletons, by default, and so they should be reentrant and typically stateless. The <em>ignoreFieldNames</em> property specifies one or more field names that should be ignored. The <em>ignoreFieldTypes</em> property specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').

#-------------------------------------------------------------------------------
# IMPORTS rules
#-------------------------------------------------------------------------------
DuplicateImport.description=Duplicate import statements are unnecessary.
DuplicateImport.description.html=Duplicate import statements are unnecessary.

ImportFromSamePackage.description=An import of a class that is within the same package is unnecessary.
ImportFromSamePackage.description.html=An import of a class that is within the same package is unnecessary.

UnnecessaryGroovyImport.description=A Groovy file does not need to include an import for classes from java.lang, java.util, java.io, java.net, groovy.lang and groovy.util, as well as the classes java.math.BigDecimal and java.math.BigInteger.
UnnecessaryGroovyImport.description.html=A Groovy file does not need to include an import for classes from <em>java.lang</em>, <em>java.util</em>, <em>java.io</em>, <em>java.net</em>, <em>groovy.lang</em> and <em>groovy.util</em>, as well as the classes <em>java.math.BigDecimal</em> and <em>java.math.BigInteger</em>.

UnusedImport.description=Imports for a class that is never referenced within the source file is unnecessary.
UnusedImport.description.html=Imports for a class that is never referenced within the source file is unnecessary.

#-------------------------------------------------------------------------------
# JUNIT rules
#-------------------------------------------------------------------------------
JUnitSetUpCallsSuper.description=Checks that if the JUnit setUp() method is defined, that it includes a call to super.setUp().
JUnitSetUpCallsSuper.description.html=Checks that if the JUnit <em>setUp()</em> method is defined, that it includes a call to <em>super.setUp()</em>.

JUnitTearDownCallsSuper.description=Checks that if the JUnit tearDown() method is defined, that it includes a call to super.tearDown().
JUnitTearDownCallsSuper.description.html=Checks that if the JUnit <em>tearDown()</em> method is defined, that it includes a call to <em>super.tearDown()</em>.

JUnitAssertAlwaysFails.description=Checks for JUnit assert() method calls with constant arguments such that the assertion always fails. This includes: assertTrue(false), assertFalse(true) and assertNull(CONSTANT).
JUnitAssertAlwaysFails.description.html=Checks for JUnit <em>assert()</em> method calls with constant arguments such that the assertion always fails. This includes: <em>assertTrue(false)</em>, <em>assertFalse(true)</em> and <em>assertNull(CONSTANT)</em>.

JUnitAssertAlwaysSucceeds.description=Checks for JUnit assert() method calls with constant arguments such that the assertion always succeeds. This includes: assertTrue(true), assertFalse(false) and assertNull(null).
JUnitAssertAlwaysSucceeds.description.html=Checks for JUnit <em>assert()</em> method calls with constant arguments such that the assertion always succeeds. This includes: <em>assertTrue(true)</em>, <em>assertFalse(false)</em> and <em>assertNull(null)</em>.

JUnitPublicNonTestMethod.description=Checks if a JUnit test class contains public methods other than standard test methods, JUnit framework methods or methods with JUnit annotations.
JUnitPublicNonTestMethod.description.html=Checks if a JUnit test class contains public methods other than standard test methods, JUnit framework methods or methods with JUnit annotations.

#-------------------------------------------------------------------------------
# LOGGING rules
#-------------------------------------------------------------------------------
PrintStackTrace.description=Checks for calls to printStackTrace().
PrintStackTrace.description.html=Checks for calls to <em>printStackTrace()</em>.

Println.description=Checks for calls to this.print(), this.println() or this.printf().
Println.description.html=Checks for calls to <em>this.print()</em>, <em>this.println()</em> or <em>this.printf()</em>.

SystemErrPrint.description=Checks for calls to System.err.print(), System.err.println() or System.err.printf().
SystemErrPrint.description.html=Checks for calls to <em>System.err.print()</em>, <em>System.err.println()</em> or <em>System.err.printf()</em>.

SystemOutPrint.description=Checks for calls to System.out.print(), System.out.println() or System.out.printf().
SystemOutPrint.description.html=Checks for calls to <em>System.out.print()</em>, <em>System.out.println()</em> or <em>System.out.printf()</em>.

#-------------------------------------------------------------------------------
# NAMING rules
#-------------------------------------------------------------------------------
AbstractClassName.description=Verifies that the name of an abstract class matches a regular expression specified in the regex property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active. This rule ignores interfaces.
AbstractClassName.description.html=Verifies that the name of an abstract class matches a regular expression specified in the <em>regex</em> property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active. This rule ignores interfaces.

ClassName.description=Verifies that the name of a class matches a regular expression. By default it checks that the class name starts with an uppercase letter and is followed by zero or more word characters (letters, numbers or underscores). The regex property specifies the regular expression used to validate the class name.
ClassName.description.html=Verifies that the name of a class matches a regular expression. By default it checks that the class name starts with an uppercase letter and is followed by zero or more word characters (letters, numbers or underscores). The <em>regex</em> property specifies the regular expression used to validate the class name.

FieldName.description=Verifies that the name of each field matches a regular expression. By default it checks that non-'final' field names start with a lowercase letter and contains only letters or numbers, and 'final' field names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The regex property specifies the default regular expression used to validate field names. The finalRegex property specifies the regular expression to validate 'final' field names. The staticRegex property specifies the regular expression to validate 'static' field names. The staticFinalRegex property specifies the regular expression to validate 'static final' field names.  The ignoreFieldNames property can specify field names that should be ignored, optionally containing wildcard characters ('*' or '?').
FieldName.description.html=Verifies that the name of each field matches a regular expression. By default it checks that non-'final' field names start with a lowercase letter and contains only letters or numbers, and 'final' field names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The <em>regex</em> property specifies the default regular expression used to validate field names. The <em>finalRegex</em> property specifies the regular expression to validate 'final' field names. The <em>staticRegex</em> property specifies the regular expression to validate 'static' field names. The <em>staticFinalRegex</em> property specifies the regular expression to validate 'static final' field names.  The <em>ignoreFieldNames</em> property can specify field names that should be ignored, optionally containing wildcard characters ('*' or '?').

InterfaceName.description=Verifies that the name of an interface matches a regular expression specified in the regex property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active.
InterfaceName.description.html=Verifies that the name of an interface matches a regular expression specified in the <em>regex</em> property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active.

MethodName.description=Verifies that the name of each method matches a regular expression. By default it checks that the method name starts with a lowercase letter. The regex property specifies the regular expression to check the method name against.  The ignoreMethodNames property can specify method names that should be ignored, optionally containing wildcard characters ('*' or '?').
MethodName.description.html=Verifies that the name of each method matches a regular expression. By default it checks that the method name starts with a lowercase letter. The <em>regex</em> property specifies the regular expression to check the method name against.  The <em>ignoreMethodNames</em> property can specify method names that should be ignored, optionally containing wildcard characters ('*' or '?').

PackageName.description=Verifies that the package name for a class matches a regular expression. By default it checks that the package name consists of only lowercase letters, separated by periods. The regex property specifies the regular expression used to validate the package name. The packageNameRequired property indicates whether a package name declaration is required for all classes.
PackageName.description.html=Verifies that the package name for a class matches a regular expression. By default it checks that the package name consists of only lowercase letters, separated by periods. The <em>regex</em> property specifies the regular expression used to validate the package name. The <em>packageNameRequired</em> property indicates whether a package name declaration is required for all classes.

ParameterName.description=Verifies that the name of each parameter matches a regular expression. This rule applies to method parameters, constructor parameters and closure parameters. By default it checks that parameter names start with a lowercase letter and contains only letters or numbers. The regex property specifies the default regular expression used to validate the parameter name.  The ignoreParameterNames property can specify parameter names that should be ignored, optionally containing wildcard characters ('*' or '?').
ParameterName.description.html=Verifies that the name of each parameter matches a regular expression. This rule applies to method parameters, constructor parameters and closure parameters. By default it checks that parameter names start with a lowercase letter and contains only letters or numbers. The <em>regex</em> property specifies the default regular expression used to validate the parameter name.  The <em>ignoreParameterNames</em> property can specify parameter names that should be ignored, optionally containing wildcard characters ('*' or '?').

VariableName.description=Verifies that the name of each method matches a regular expression. By default it checks that non-'final' variable names start with a lowercase letter and contains only letters or numbers, and 'final' variable names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The regex property specifies the default regular expression used to validate a non-'final' variable name. The finalRegex property specifies the regular expression used to validate 'final' variable names. The ignoreVariableNames property can specify variable names that should be ignored, optionally containing wildcard characters ('*' or '?').
VariableName.description.html=Verifies that the name of each method matches a regular expression. By default it checks that non-'final' variable names start with a lowercase letter and contains only letters or numbers, and 'final' variable names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The <em>regex</em> property specifies the default regular expression used to validate a non-'final' variable name. The <em>finalRegex</em> property specifies the regular expression used to validate 'final' variable names. The <em>ignoreVariableNames</em> property can specify variable names that should be ignored, optionally containing wildcard characters ('*' or '?').

PropertyName.description=Verifies that the name of each property matches a regular expression. By default it checks that property names other than 'static final' start with a lowercase letter and contains only letters or numbers, and 'static final' property names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The regex property specifies the default regular expression used to validate property names. The finalRegex property specifies the regular expression to validate 'final' property names. The staticRegex property specifies the regular expression to validate 'static' property names. The staticFinalRegex property specifies the regular expression to validate 'static final' property names.  The ignorePropertyNames property can specify property names that should be ignored, optionally containing wildcard characters ('*' or '?').
PropertyName.description.html=Verifies that the name of each property matches a regular expression. By default it checks that property names other than 'static final' start with a lowercase letter and contains only letters or numbers, and 'static final' property names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The <em>regex</em> property specifies the default regular expression used to validate property names. The <em>finalRegex</em> property specifies the regular expression to validate 'final' property names. The <em>staticRegex</em> property specifies the regular expression to validate 'static' property names. The <em>staticFinalRegex</em> property specifies the regular expression to validate 'static final' property names.  The <em>ignorePropertyNames</em> property can specify property names that should be ignored, optionally containing wildcard characters ('*' or '?').

#-------------------------------------------------------------------------------
# SIZE rules
#-------------------------------------------------------------------------------
ClassSize.description=Checks if the size of a class exceeds the number of lines specified by the maxLines property, which defaults to 1000.
ClassSize.description.html=Checks if the size of a class exceeds the number of lines specified by the <em>maxLines</em> property, which defaults to 1000.

CyclomaticComplexity.description=Checks the cyclomatic complexity for methods/classes.\
  A method (or "closure field") with a cyclomatic complexity value greater than the maxMethodComplexity\
  property (which defaults to 20) causes a violation. Likewise, a class that has an (average method) cyclomatic complexity\
  value greater than the maxClassAverageMethodComplexity property (which defaults to 20) causes a violation.
CyclomaticComplexity.description.html=Checks the cyclomatic complexity for methods/classes.\
  A method (or "closure field") with a cyclomatic complexity value greater than the <em>maxMethodComplexity</em>\
  property (which defaults to 20) causes a violation. Likewise, a class that has an (average method) cyclomatic complexity\
  value greater than the <em>maxClassAverageMethodComplexity</em> property (which defaults to 20) causes a violation.

MethodSize.description=Checks if the size of a method exceeds the number of lines specified by the maxLines property, which defaults to 100.
MethodSize.description.html=Checks if the size of a method exceeds the number of lines specified by the <em>maxLines</em> property, which defaults to 100.

NestedBlockDepth.description=Checks for blocks or closures nested more than maxNestedBlockDepth levels deep, which defaults to 5.
NestedBlockDepth.description.html=Checks for blocks or closures nested more than <em>maxNestedBlockDepth</em> levels deep, which defaults to 5.

#-------------------------------------------------------------------------------
# UNUSED rules
#-------------------------------------------------------------------------------
UnusedPrivateField.description=Checks for private fields that are not referenced within the same class.
UnusedPrivateField.description.html=Checks for private fields that are not referenced within the same class.

UnusedPrivateMethod.description=Checks for private methods that are not referenced within the same class.
UnusedPrivateMethod.description.html=Checks for private methods that are not referenced within the same class.

UnusedVariable.description=Checks for variables that are never referenced.
UnusedVariable.description.html=Checks for variables that are never referenced.

#-------------------------------------------------------------------------------
# HTML Report
#-------------------------------------------------------------------------------
htmlReport.titlePrefix=CodeNarc Report
htmlReport.reportTimestamp.label=Report timestamp:
htmlReport.summary.title=Summary by Package
htmlReport.summary.packageHeading=Package
htmlReport.summary.totalFilesHeading=Total Files
htmlReport.summary.filesWithViolationsHeading=Files with Violations
htmlReport.summary.priority1Heading=Priority 1
htmlReport.summary.priority2Heading=Priority 2
htmlReport.summary.priority3Heading=Priority 3
htmlReport.summary.allPackages=All Packages
htmlReport.violations.ruleName=Rule Name
htmlReport.violations.priority=Priority
htmlReport.violations.lineNumber=Line #
htmlReport.violations.sourceLine=Source Line / Message
htmlReport.ruleDescriptions.title=Rule Descriptions
htmlReport.ruleDescriptions.ruleNameHeading=Rule Name
htmlReport.ruleDescriptions.descriptionHeading=Description
